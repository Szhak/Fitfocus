import telebot
from telebot import types
import database
import util

Token = "6609998211:AAG1inKSYLKS4P4pN5Lmc2XuTxaSjOXmypk"  # Token Bot
bot = telebot.TeleBot(Token)

stopping_message = False


@bot.message_handler(commands=['start'])
def start(message):
    global stopping_message
    stopping_message = False
    database.delete_user(message.chat.id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")
    btn2 = types.InlineKeyboardButton("–∫–ë–ñ–£", callback_data="CPFC")
    btn5 = types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="communication")
    btn3 = types.InlineKeyboardButton("–ú—É–∑—ã–∫–∞", callback_data="Music")
    btn4 = types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", url="https://t.me/FitFocusBot/FitFocus")
    markup.add(btn1)
    markup.add(btn5, btn2)
    markup.add(btn4, btn3)
    bot.send_message(message.chat.id, """üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ –ù–∞—á–Ω–µ–º –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ–≥–æ —Å—Ç–∞—Ä—Ç–∞! 
    –Ø –≤–∞—à –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞. üí™üèãÔ∏è‚Äç‚ôÇÔ∏è 
    –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é! 
    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:

üíº –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
üçè –∫–ë–ñ–£: –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–∏ –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.
üí¨ –û–±—â–µ–Ω–∏–µ:–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å
üéµ –ú—É–∑—ã–∫–∞: –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
üõí –ú–∞–≥–∞–∑–∏–Ω: –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å–∞.
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –æ–ø—Ü–∏—é –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üåü""", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == "schedule")
def schedule(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="Monday")
    btn2 = types.InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="Tuesday")
    btn3 = types.InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="Wednesday")
    btn4 = types.InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="Thursday")
    btn5 = types.InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="Friday")
    btn6 = types.InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="Saturday")
    btn7 = types.InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="Sunday")
    markup.add(btn1, btn2, btn3)
    markup.add(btn4, btn5, btn6)
    markup.add(btn7)
    bot.send_message(message.message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥. "
                     "–°—Ç–∞–Ω—å—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –Ω–∞—à–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º. üí™üìù "
                     "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
                     reply_markup=markup)


@bot.callback_query_handler(
    func=lambda day_week: day_week.data in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
                                            "Sunday"])
def send(message):  # –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    day = message.data
    day_in_russ = {"Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "Wednesday": "–°—Ä–µ–¥–∞", "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                   "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞", "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    user_id = message.message.chat.id
    plans = database.get_day_of_week(user_id, day)
    if plans:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="Change")
        btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="Delete")
        markup.add(btn1, btn2)
        bot.send_message(user_id,
                         f"üöÄ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {day_in_russ[day]} –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –¥–µ–π—Å—Ç–≤–∏—é! üåü"
                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å', —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω—ã"
                         "\nüéØ'–£–¥–∞–ª–∏—Ç—å' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—É–Ω–∫—Ç—ã."
                         f"\n–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{plans}",
                         reply_markup=markup)

    else:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="Create")
        markup.add(btn1)
        bot.send_message(user_id,
                         f"üö´ –í–∞—à –ø–ª–∞–Ω –Ω–∞ {day_in_russ[day]} –ø–æ–∫–∞ –ø—É—Å—Ç! üòî –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! "
                         "–ï—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ü–µ–ª–∏! üìù"
                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
                         "–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º!üí™üìÖ", reply_markup=markup)

    @bot.callback_query_handler(func=lambda change: change.data in ["Change", "Delete", "Create"])
    def Change_delete_Create(update):
        global stopping_message
        if update.data == "Change":
            stopping_message = True
            bot.send_message(user_id,
                             "üîÑ –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! üìÖüîß"
                             "–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –≤–∞—à –¥–µ–Ω—å –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º! "
                             "–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã! üí™üåü")

            @bot.message_handler(func=lambda msg: stopping_message)
            def change_schedule(message1):
                global stopping_message
                database.update_plan(user_id, message1.text, day)
                bot.reply_to(message1, "‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –î–∞–≤–∞–π—Ç–µ –≤–ø–µ—Ä–µ–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π! üí™"
                                       "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                stopping_message = False

        elif update.data == "Delete":
            database.delete_plan_in_day(user_id, day)
            bot.reply_to(update.message,
                         "üóëÔ∏è –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å,"
                         " –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∏ –µ—â–µ –±–æ–ª–µ–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã! ")

        elif update.data == "Create":
            stopping_message = True
            bot.send_message(user_id, "üìù –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –∏ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º!üí°")

            @bot.message_handler(func=lambda msg: stopping_message)
            def add_schedule(message1):
                global stopping_message
                database.save_plan(user_id, day, message1.text)
                stopping_message = False
                bot.reply_to(message1,
                             "üéâ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤–∞—à –¥–µ–Ω—å —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º!"
                             "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.callback_query_handler(func=lambda cpfc: cpfc.data == "CPFC")
def gender(message):  # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–µ—Ç –≤ –±–¥ —Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–¥ –∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –∫–ë–ñ–£
    user_id = message.message.chat.id
    if database.chek_need_cpfc(user_id) is False:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–Ø –ø–∞—Ä–µ–Ω—å", callback_data="boy")
        btn2 = types.InlineKeyboardButton("–Ø –¥–µ–≤—É—à–∫–∞", callback_data="girl")
        markup.add(btn1, btn2)
        bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏–º –ø–ª–∞–Ω –∫–ë–ñ–£\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", reply_markup=markup)
    else:
        cpfc_need = database.get_data_need_cpfc(user_id)
        cpfc = util.left_cpfc(database.get_data_need_cpfc(user_id), database.get_data_cpfc(user_id))
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="cpfc_add")
        btn2 = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_cpfc")
        markup.add(btn1, btn2)
        bot.send_message(user_id, f"""–í–∞—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –ö–ë–ñ–£:
–ë–µ–ª–æ–∫: {int(cpfc_need[0])}
–ñ–∏—Ä—ã: {int(cpfc_need[1])}
–£–≥–ª–µ–≤–æ–¥—ã: {int(cpfc_need[2])}
–ö–∞–ª–æ—Ä–∏–∏: {int(cpfc_need[3])}

C–µ–≥–æ–¥–Ω—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–æ—Ç—Ä–µ–±–∏—Ç—å:
–ë–µ–ª–æ–∫: {cpfc[0]}
–ñ–∏—Ä: {cpfc[1]}
–£–≥–ª–µ–≤–æ–¥: {cpfc[2]}
–ö–∞–ª–æ—Ä–∏–∏: {cpfc[3]}
–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å' —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ë–ñ–£ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å' —á—Ç–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å """, reply_markup=markup)


@bot.callback_query_handler(func=lambda gender_user: gender_user.data in ["boy", "girl", "cpfc_add", "update_cpfc"])
def gender_u(message):
    global gen, stopping_message  # gen
    stopping_message = True
    user_id = message.message.chat.id
    if message.data == "boy" or message.data == "girl":
        gen = message.data
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–î–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è", callback_data="defecate")
        btn2 = types.InlineKeyboardButton("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è", callback_data="saving")
        btn3 = types.InlineKeyboardButton("–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è", callback_data="surplus")
        markup.add(btn1, btn2, btn3)
        bot.edit_message_text(chat_id=user_id, message_id=message.message.message_id,
                              text="–ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –ª–∏ –≤—ã –∫ —Å—Ç—Ä–æ–π–Ω–æ—Å—Ç–∏, "
                                   "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é —Ñ–æ—Ä–º—ã –∏–ª–∏ –Ω–∞–±–æ—Ä—É –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã,"
                                   " —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–∞—Å! Ô∏è‚Äç‚ôÇÔ∏è"
                                   "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å –Ω–∏–∂–µ, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, "
                                   "—á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –∂–µ–ª–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! üöÄüí¨", reply_markup=markup)  # 241 next
    else:
        if message.data == "update_cpfc":
            database.delete_cpfc(user_id)
            bot.send_message(user_id, "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ‚úÖ")
        elif message.data == "cpfc_add":  # –∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–ª —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤—ã–∑—ã–≤–∞–ª–æ—Å—å add_plan —Ö–∑ –ø–æ—á–µ–º—É
            bot.send_message(user_id,
                             "üç¥ –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–æ–∫! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö."
                             "\n–ü—Ä–∏–º–µ—Ä: —Å–Ω–∏–∫–µ—Ä—Å 50")

            @bot.message_handler(func=lambda msg: stopping_message)
            def add_cpfc(message1):
                global stopping_message
                product = message1.text.lower().split()
                a, b = util.product(product)
                list_food = database.find_food(a[0])
                try:
                    if list_food is not None:
                        database.add_cpfc(user_id, list_food[2], list_food[3], list_food[4],
                                          list_food[5], b[-1])
                        bot.reply_to(message1,
                                     "–•–æ—Ä–æ—à–æ,–∑–∞–ø–∏—Å–∞–ª‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é(–ß–µ–∫–Ω–∏ –∫–ë–ñ–£)")
                        stopping_message = False
                    else:
                        bot.reply_to(message1, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {product[0]}.\n"
                                               "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
                                               "–ù–∞–ø–∏—à–∏—Ç–µ –∫–ë–ñ–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ (–æ–±—ã—á–Ω–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è "
                                               "–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞):\n"
                                               "–ü—Ä–∏–º–µ—Ä: –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ (—Ñ–∏–ª–µ) 23.6 1.9 0.4 113-(–ù–∞–∑–≤–∞–Ω–∏–µ) –ë –ñ –£ –ö \n"
                                               "–ï—Å–ª–∏ –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ—Ç —ç—Ç–∏–∫–µ—Ç–∫–∏, –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ \n"
                                               "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–ë–ñ–£ –≤ 100 –≥—Ä–∞–º–º–∞—Ö"
                                               "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

                        bot.register_next_step_handler(message1, add_product)

                except IndexError:
                    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ... \n–ü—Ä–∏–º–µ—Ä:–°–Ω–∏–∫–µ—Ä—Å 100")

            def add_product(message1):
                global stopping_message
                need = message1.text.lower().split()
                name, cpfc = util.product(need)
                if isinstance(name, str) and all(isinstance(numbers, int) for numbers in cpfc):
                    database.insert_food(name[0], *cpfc)
                    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. –í–∞—à –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É‚úÖ"
                                              "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    stopping_message = False

                else:
                    bot.send_message(user_id,
                                     "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞... –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ.\n"
                                     "–ü—Ä–∏–º–µ—Ä: –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ (—Ñ–∏–ª–µ) 23.6 1.9 0.4 113-(–ù–∞–∑–≤–∞–Ω–∏–µ) –ë –ñ –£ –ö")


@bot.callback_query_handler(func=lambda weight: weight.data in ["defecate", "saving", "surplus"])
def activ(bob):  # –•–∑ –ø–æ—á–µ–º—É bob
    global purpose
    purpose = bob.data
    markup2 = types.InlineKeyboardMarkup()
    btn12 = types.InlineKeyboardButton("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data="few")
    btn22 = types.InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ", callback_data="normal")
    btn32 = types.InlineKeyboardButton("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data="high")
    markup2.add(btn12, btn22, btn32)
    bot.edit_message_text(chat_id=bob.message.chat.id, message_id=bob.message.message_id,
                          text="""–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –º–∞–ª–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.üñ•
–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ, –º–∞–ª–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.üè¶
–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –∏–ª–∏ –∑–∞–Ω—è—Ç–∏–π —Å–ø–æ—Ä—Ç–æ–º.üè°

–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç–∞–∫–∞—è –∫–∞–∫ –∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—éüöµüèª
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—èüèåüèª
–†–∞–±–æ—Ç–∞, —Ç—Ä–µ–±—É—é—â–∞—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, –Ω–æ –±–µ–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–πüöó

–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º 4-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.üèã
–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å–∏–ª–∏—èüèä
–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è‚õπ""", reply_markup=markup2)


@bot.callback_query_handler(func=lambda active: active.data in ["few", "normal", "high"])
def formula(jo):  # –¢–∞ –∂–∞ —Å–∞–º–∞—è –∏—Å—Ç–æ—Ä–∏—è
    global stopping_message
    stopping_message = True
    active = jo.data
    bot.edit_message_text(chat_id=jo.message.chat.id, message_id=jo.message.message_id,
                          text="üìä –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤–∞—Å! üèÉ‚Äç‚ôÇÔ∏èüí® "
                               "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞—Å—á–µ—Ç–∞–ºüî¢"
                               "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç, –≤–µ—Å –∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"
                               "'–†–æ—Å—Ç –í–µ—Å –í–æ–∑—Ä–∞—Å—Ç'. –ù–∞–ø—Ä–∏–º–µ—Ä: 175 70 20. ")

    @bot.message_handler(func=lambda msg: stopping_message)
    def insert_need_cpfc(message):
        global stopping_message
        try:
            need = message.text.split()
            calories = util.calories(int(need[0]), int(need[1]), int(need[2]), gen, active, purpose)
            protein_need = util.protein_and_fat(calories)
            fat_need = util.protein_and_fat(calories)
            carbohydrate_need = util.carbohydrate(calories)
            database.insert_cpfc_need(jo.message.chat.id, protein_need, fat_need, carbohydrate_need, calories)
            bot.send_message(jo.message.chat.id, "–í–∞—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–ë–ñ–£ –∑–∞–ø–∏—Å–∞–Ω–æ‚úÖ"
                                                 "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ –±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            stopping_message = False
        except ValueError:
            bot.send_message(jo.message.chat.id, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞... –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n–ø—Ä–∏–º–µ—Ä: 175 70 20")


@bot.callback_query_handler(func=lambda music: music.data == "Music")
def url_music(user):
    global stopping_message
    stopping_message = True
    user_id = user.message.chat.id
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ,"
                              " –∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫! üé∂")

    @bot.message_handler(func=lambda msg: stopping_message)
    def get_music_url(message):
        global stopping_message
        bot.reply_to(message, util.send_music(message.text))


@bot.callback_query_handler(func=lambda talk: talk.data == "communication")
def communication(button):
    user_id = button.message.chat.id
    database.delete_user(user_id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–∞—Ä–µ–Ω—å", callback_data="Man")
    btn2 = types.InlineKeyboardButton("–î–µ–≤—É—à–∫–∞", callback_data="Women")
    markup.add(btn1, btn2)
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª: ", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data in ["Man", "Women"])
def choice_partner(message):
    global user_gender
    user_gender = message.data
    user_id = message.message.chat.id
    markup_find = types.InlineKeyboardMarkup()
    btn3 = types.InlineKeyboardButton("–ü–∞—Ä–µ–Ω—å", callback_data="find_Man")
    btn4 = types.InlineKeyboardButton("–î–µ–≤—É—à–∫–∞", callback_data="find_Women")
    markup_find.add(btn3, btn4)
    bot.edit_message_text(chat_id=user_id, message_id=message.message.message_id,
                          text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ —Å –∫–∞–∫–∏–º –ø–æ–ª–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:",
                          reply_markup=markup_find)


@bot.callback_query_handler(func=lambda user: user.data in ["find_Man", "find_Women"])
def find_candidates(message):
    user_id = message.message.chat.id
    preference = message.data.replace("find_", "")
    candidates = database.find_candidates(user_gender, preference)
    database.add_user(user_id, user_gender, preference)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–°—Ç–æ–ø", callback_data="Stop")
    markup.add(btn1)
    bot.edit_message_text(chat_id=user_id, message_id=message.message.message_id,
                          text="–ò—â–µ–º –≤–∞–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=markup)

    if candidates:
        database.insert_partner(candidates[0], user_id)
        database.insert_partner(user_id, candidates[0])
        chat = [user_id, candidates[0]]
        bot.send_message(user_id and candidates[0],
                         text="–ú—ã –≤–∞–º –Ω–∞—à–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º\n–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                         reply_markup=markup)
        communication_chat(chat, markup)
    # else:
    #     bot.edit_message_text(chat_id=user_id, message_id=message.message.message_id,
    #                           text="–ü–æ—Ö–æ–∂–µ —Å–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω–µ,–ü–æ–¥–æ–∂–¥–µ–º –µ—â–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤–æ–∑–º–æ–∂–Ω–æ,"
    #                                " –∫—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –æ–Ω–ª–∞–π–Ω–µ –∏ –∑–∞—Ö–æ—á–µ—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è.",
    #                           reply_markup=markup)


def communication_chat(chat, markup):
    @bot.message_handler(content_types=["text"])
    def handle_message(message):
        for i in chat:
            bot.send_message(i, message.text, reply_markup=markup)


@bot.callback_query_handler(func=lambda g: g.data == "Stop")
def stop_talking(f):
    user_id = f.message.chat.id
    database.delete_user(user_id)
    bot.send_message(user_id, "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ\n"
                              "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


bot.polling()
